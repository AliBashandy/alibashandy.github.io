plot.background = element_blank(),
panel.background = element_blank(),
plot.title = element_text(family = "serif",
color = "#01014B",
size = 14,
hjust = 0.5)
) +
scale_fill_manual(values = (c("United States"="lightgreen",
"China"="#e7e9f7",
"Japan"="#ced4ef",
"Germany"="#b5c0e6",
"United Kingdom"="#9cabde",
"France"="#8298d5",
"India"="#6585cd",
"South Korea"="#4472c4",
"Italy"="#28547a",
"Brazil"="#023881")
)
)
bottom_gdp_plot<- ggplot(bottom_gdp,
aes(area = GDP/1000000, fill = Country,
label = paste(Country, GDP/1000000,"mil USD", sep = "\n")
)
)+
geom_treemap(alpha = 0.50,
start = "topleft",
radius = unit(15,"pt")
)+
geom_treemap_text(colour = "black",
place = "centre",
family = "serif",
min.size = 6,
grow = FALSE,
reflow = TRUE,
start = "topleft"
)+
labs(title = "The 10 Countries with lowest GDP ")+
theme(legend.position = "none",
plot.background = element_blank(),
plot.title = element_text(family = "serif",
color = "#01014B",
size = 14,
hjust = 0.5
),
panel.background = element_blank()
) +
scale_fill_manual(values = (c("Tuvalu"="red",
"Nauru"="#e7e9f7",
"Kiribati"="#ced4ef",
"Marshall Islands"="#b5c0e6",
"Palau"="#9cabde",
"Federated States of Micronesia"="#8298d5",
"Sao Tome and Principe"="#6585cd",
"Tonga"="#4472c4",
"Dominica"="#28547a",
"Saint Vincent and the Grenadines"="#023881")
)
)
grid.arrange(top_gdp_plot, bottom_gdp_plot,nrow = 1,heights = c(6), ncol = 2, widths = c(5,5))
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, digits = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, digits = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, accuracy = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, accuracy = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# Create a color palette with handmade bins.
map_bins <- c(0,10000,100000,1000000,10000000,100000000,500000000,1397715000)
map_palette <- colorBin( palette="Blues", domain=countries_poly@data$Population, na.color="transparent", bins=map_bins)
leaflet(countries_poly) %>%
addTiles()  %>%
setView( lat=30, lng=0 , zoom=1) %>%
addPolygons(fillColor = ~map_palette(countries_poly@data$Population) ,
stroke= FALSE,
fillOpacity = 0.7,
color = "white",
opacity = 1,
weight=2,
dashArray = "3",
label = map_text,
labelOptions = labelOptions(
style = list("font-weight" = "normal",padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
)
library(fastmap)
install.packages("fastmap")
detach("package:fastmap", unload = TRUE)
install.packages("fastmap")
install.packages("fastmap")
remove.packages("fastmap")
install.packages("fastmap")
knitr::opts_chunk$set(echo = FALSE)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
library(fastmap)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
library(tidyverse) # essential ***
library(rgdal) #OgrListlayers
library(ggplot2) #plotting ***
library(ggspatial) #Spatial Layer***
library(extrafont) #for font Rstudio***
loadfonts(device = "win", quiet = TRUE) #***
library(readr) #Read CSV ***
library(gridExtra) # Table themes ***
library(skimr)
library(gtable) # Table grouping ***
library(grid) #Grid customization ***
library(scales) # Table text wrap ***
library(ggh4x) # Table panel size ***
library(ggrepel) # pop World map label repel
library(formattable) # Convert numeric to currency
library(treemapify) # for the treemap
library(sf)
library(leaflet)
#library(dplyr)
#library(RColorBrewer)
#library(reshape2)
#library(ggpubr)
#library(dplyr)
#library(here)
#library(crayon)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, accuracy = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, accuracy = NULL),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# Create a color palette with handmade bins.
map_bins <- c(0,10000,100000,1000000,10000000,100000000,500000000,1397715000)
map_palette <- colorBin( palette="Blues", domain=countries_poly@data$Population, na.color="transparent", bins=map_bins)
leaflet(countries_poly) %>%
addTiles()  %>%
setView( lat=30, lng=0 , zoom=1) %>%
addPolygons(fillColor = ~map_palette(countries_poly@data$Population) ,
stroke= FALSE,
fillOpacity = 0.7,
color = "white",
opacity = 1,
weight=2,
dashArray = "3",
label = map_text,
labelOptions = labelOptions(
style = list("font-weight" = "normal",padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, accuracy = 0.1),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# preparing shapefile data to match the dataset
#in the below code iam changing the name of countries to match the dataset to facilitate the join function
countries_poly@data<- countries_poly@data%>%
mutate(ADMIN = recode(ADMIN, `United States of America` = "United States",
`Cabo Verde` = "Cape Verde",
`Czechia` = "Czech Republic",
`Gambia` = "The Gambia",
`São Tomé and Principe` = "Sao Tome and Principe",
`Republic of Serbia` = "Serbia",
`United Republic of Tanzania` = "Tanzania",
`Vatican` = "Vatican City",
`Ireland` = "Republic of Ireland",
`Palestine` = "Palestinian National Authority",
`eSwatini` = "Eswatini"
)
)
countries_poly@data<- left_join(countries_poly@data, dataset, by=c('ADMIN'='Country'), keep=TRUE)
map_text<-paste("Country Name: ",countries_poly@data$FORMAL_EN,"<br/>",
"Capital: ",countries_poly@data$`Capital/Major City`,"<br/>",
"Official Language: ",countries_poly@data$`Official language`,"<br/>",
"Population: ",comma(countries_poly@data$Population, digits = 0),"<br/>",
"Density(P/Km2): ", countries_poly@data$`Density (P/Km2)`,"<br/>",
"Land Area(Km2): ",countries_poly@data$`Land Area(Km2)`,"<br/>",
"Gross domestic product(GDP): ",countries_poly@data$GDP,"<br/>",
sep = "")%>%
lapply(htmltools::HTML)
# Create a color palette with handmade bins.
map_bins <- c(0,10000,100000,1000000,10000000,100000000,500000000,1397715000)
map_palette <- colorBin( palette="Blues", domain=countries_poly@data$Population, na.color="transparent", bins=map_bins)
leaflet(countries_poly) %>%
addTiles()  %>%
setView( lat=30, lng=0 , zoom=1) %>%
addPolygons(fillColor = ~map_palette(countries_poly@data$Population) ,
stroke= FALSE,
fillOpacity = 0.7,
color = "white",
opacity = 1,
weight=2,
dashArray = "3",
label = map_text,
labelOptions = labelOptions(
style = list("font-weight" = "normal",padding = "3px 8px"),
textsize = "12px",
direction = "auto"
)
)
library(sf)            # classes and functions for vector data
# > Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE
library(terra)         # classes and functions for raster data
library(spData)        # load geographic data
library(spDataLarge)   # load larger geographic data
library(rgdal) #OgrListlayers
library(sf)
library(terra)
library(ggplot2) #plotting ***
library(ggspatial) #Spatial Layer***
library(extrafont) #for font Rstudio***
# Natural Earth shape files -- global (Robinson) projections
# get shapefiles from http://www.naturalearthdata.com
shape_path <- "D:/Github/Data Analysis Projects/Natural Earth Shapes"
coastline_shapefile <- paste(shape_path, "/ne_50m_coastline.shp", sep="")
ocean_shapefile <- paste(shape_path, "/ne_50m_ocean.shp", sep="")
countries_shapefile <- paste(shape_path, "/ne_50m_admin_0_countries.shp", sep="")
boundingbox_shapefile <- paste(shape_path, "/ne_50m_wgs84_bounding_box.shp", sep="")
graticules30_shapefile <- paste(shape_path, "/ne_50m_graticules_30.shp", sep="")
rivers_shapefile <- paste(shape_path, "/ne_50m_rivers_lake_centerlines.shp", sep="")
lakes_shapefile <- paste(shape_path, "/ne_50m_lakes.shp", sep="")
snowareas_shapefile <- paste(shape_path, "/ne_50m_glaciated_areas.shp", sep="")
# read the shape file
layer <- ogrListLayers(coastline_shapefile) # find out kind of shapefile (lines vs. polygons)
# Natural Earth shape files -- global (Robinson) projections
# get shapefiles from http://www.naturalearthdata.com
shape_path <- "D:/Github/Data Analysis Projects/Natural Earth Shapes"
coastline_shapefile <- paste(shape_path, "/ne_50m_coastline.shp", sep="")
ocean_shapefile <- paste(shape_path, "/ne_50m_ocean.shp", sep="")
countries_shapefile <- paste(shape_path, "/ne_50m_admin_0_countries.shp", sep="")
boundingbox_shapefile <- paste(shape_path, "/ne_50m_wgs84_bounding_box.shp", sep="")
graticules30_shapefile <- paste(shape_path, "/ne_50m_graticules_30.shp", sep="")
rivers_shapefile <- paste(shape_path, "/ne_50m_rivers_lake_centerlines.shp", sep="")
lakes_shapefile <- paste(shape_path, "/ne_50m_lakes.shp", sep="")
snowareas_shapefile <- paste(shape_path, "/ne_50m_glaciated_areas.shp", sep="")
# read the shape file
layer <- ogrListLayers(coastline_shapefile) # find out kind of shapefile (lines vs. polygons)
coastline_shapefile <- paste(shape_path, "/ne_50m_coastline.shp", sep="")
ocean_shapefile <- paste(shape_path, "/ne_50m_ocean.shp", sep="")
countries_shapefile <- paste(shape_path, "/ne_50m_admin_0_countries.shp", sep="")
boundingbox_shapefile <- paste(shape_path, "/ne_50m_wgs84_bounding_box.shp", sep="")
graticules30_shapefile <- paste(shape_path, "/ne_50m_graticules_30.shp", sep="")
rivers_shapefile <- paste(shape_path, "/ne_50m_rivers_lake_centerlines.shp", sep="")
lakes_shapefile <- paste(shape_path, "/ne_50m_lakes.shp", sep="")
snowareas_shapefile <- paste(shape_path, "/ne_50m_glaciated_areas.shp", sep="")
layer <- ogrListLayers(coastline_shapefile) # find out kind of shapefile (lines vs. polygons)
# Natural Earth shape files -- global (Robinson) projections
# get shapefiles from http://www.naturalearthdata.com
shape_path <- "D:/Github/Data Analysis Projects/Global EDA_Visualization in R/Natural Earth Shapes"
coastline_shapefile <- paste(shape_path, "/ne_50m_coastline.shp", sep="")
ocean_shapefile <- paste(shape_path, "/ne_50m_ocean.shp", sep="")
countries_shapefile <- paste(shape_path, "/ne_50m_admin_0_countries.shp", sep="")
boundingbox_shapefile <- paste(shape_path, "/ne_50m_wgs84_bounding_box.shp", sep="")
graticules30_shapefile <- paste(shape_path, "/ne_50m_graticules_30.shp", sep="")
rivers_shapefile <- paste(shape_path, "/ne_50m_rivers_lake_centerlines.shp", sep="")
lakes_shapefile <- paste(shape_path, "/ne_50m_lakes.shp", sep="")
snowareas_shapefile <- paste(shape_path, "/ne_50m_glaciated_areas.shp", sep="")
# read the shape file
layer <- ogrListLayers(coastline_shapefile) # find out kind of shapefile (lines vs. polygons)
ogrInfo(coastline_shapefile, layer=layer)
coast_lines <- readOGR(coastline_shapefile, layer=layer) # read the shape file
layer <- ogrListLayers(rivers_shapefile)
ogrInfo(rivers_shapefile, layer=layer)
rivers_lines <- readOGR(rivers_shapefile, layer=layer)
layer <- ogrListLayers(ocean_shapefile)
ogrInfo(ocean_shapefile, layer=layer)
ocean_poly <- readOGR(ocean_shapefile, layer=layer)
layer <- ogrListLayers(snowareas_shapefile)
ogrInfo(snowareas_shapefile, layer=layer)
snowareas_poly <- readOGR(snowareas_shapefile, layer=layer)
layer <- ogrListLayers(lakes_shapefile)
ogrInfo(lakes_shapefile, layer=layer)
lakes_poly <- readOGR(lakes_shapefile, layer=layer)
layer <- ogrListLayers(countries_shapefile)
ogrInfo(countries_shapefile, layer=layer)
countries_poly <- readOGR(countries_shapefile, layer=layer)
layer <- ogrListLayers(graticules30_shapefile)
ogrInfo(graticules30_shapefile, layer=layer)
graticules30_lines <- readOGR(graticules30_shapefile, layer=layer)
layer <- ogrListLayers(boundingbox_shapefile)
ogrInfo(boundingbox_shapefile, layer=layer)
boundingbox_poly <- readOGR(boundingbox_shapefile, layer=layer)
# set Robinson CRS
robin_crs <- CRS("+proj=robin +lon_0=0w")
# do projections
boundingbox_poly_proj <- spTransform(boundingbox_poly, robin_crs)
coast_lines_proj <- spTransform(coast_lines, robin_crs)
rivers_lines_proj <- spTransform(rivers_lines, robin_crs)
countries_poly_proj <- spTransform(countries_poly, robin_crs)
graticules30_lines_proj <- spTransform(graticules30_lines, robin_crs)
ocean_poly_proj <- spTransform(ocean_poly, robin_crs)
snowareas_poly_proj <- spTransform(snowareas_poly, robin_crs)
lakes_poly_proj <- spTransform(lakes_poly, robin_crs)
#options(repr.plot.width=14, repr.plot.height=8) # Set the figures dimensions
wmap<- ggplot() +
layer_spatial(boundingbox_poly_proj, fill="white", col="black") +
layer_spatial(ocean_poly_proj, col = 'black',fill="#3880b2") +
layer_spatial(countries_poly_proj, fill='#9fcf2b', col="black") +
layer_spatial(snowareas_poly_proj, fill='white', col = "white") +
layer_spatial(lakes_poly_proj, fill="#3880b2", col = "#3880b2") +
layer_spatial(rivers_lines_proj, col="#3880b2")+
layer_spatial(graticules30_lines_proj, col="#6ba8c4") +
# labs(
#      caption = "World Map In Robinson Projection Based on Maps in R\n
#    https://pjbartlein.github.io/REarthSysSci/RMaps.html"
# ) +
theme(panel.background = element_blank(),
plot.background = element_blank()
#text = element_text(),
#plot.title = element_text(color = '#01016b',
#                          family = 'Algerian',
#                          size = 16,
#                          face = 'bold',
#                          hjust = 0.5,
#                          vjust = 0),
#plot.caption = element_text(size =12)
)
wmap
reticulate::repl_python()
df = pd.read_csv("world-data-2023.csv")
df = pd.csv_read("world-data-2023.csv")
import pandas as pd
df = pd.csv_read("world-data-2023.csv")
